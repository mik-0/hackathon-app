// Collection to store Whisper transcription i.e. segments with timestamps + text
import mongoose from "mongoose";

const { Schema, model } = mongoose;

// ðŸŽ¯ TypeScript interface for type inference
export interface ISegment {
	index: number
	startSec: number;
	endSec: number;
	text: string;
	flagged: boolean;        				// Whether flagged as offensive
	offensiveScore?: number;                // Computed similarity/flagging score
}

export interface ITranscript {
  	_id: mongoose.Types.ObjectId | string; 		// Auto-generated by MongoDB
  	mediaId: mongoose.Types.ObjectId | string; 	// Reference to MediaFile
  	segments: ISegment[];
	language: string;
  	createdAt: Date;
  	updatedAt: Date;
}

const segmentSchema = new Schema<ISegment>(
  {
    index: { type: Number, required: true },
    startSec: { type: Number, required: true },
    endSec: { type: Number, required: true },
    text: { type: String, required: true },
	flagged: { type: Boolean, required: true, default: false },
	offensiveScore: { type: Number }
  },
  { _id: false } // Embedded segments, no separate _id per segment
);

const transcriptSchema = new Schema<ITranscript>(
	{
		// Don't define _id - let MongoDB auto-generate it
		mediaId: { type: Schema.Types.ObjectId, ref: "MediaFile", required: true },	// Reference to MediaFile
		segments: { type: [segmentSchema], required: true },
		language: { type: String, required: true, default: "en" },
	},
	{
		collection: "transcripts",
		timestamps: true
	 }
);

const Transcript = model<ITranscript>("Transcript", transcriptSchema);

export { Transcript };
